

/*
 *
 * –≠—Ç–æ –∫–æ–¥ –¥–ª—è –æ–±—â–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞. –ó–∞–ø—Ä–æ—Å—ã, —Ç–æ–∫–µ–Ω –∏ –¥—Ä—É–≥–æ–µ —É–¥–∞–ª–∏–ª.
 *
 * –ë–æ—Ç –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞, –∫–æ—Ç–æ—Ä–µ –∑–∞–º–µ–Ω—è–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:
 * –ö–æ–≥–¥–∞ –∑–∞—Ö–æ–¥–∏—à—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –≤—ã—Ö–æ–¥–∏—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ –±–æ—Ç–µ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ —Å—Å—ã–ª–∫–µ, –≤–≤–æ–¥–∏—Ç –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.
 * –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —É—Å–ø–µ—à–Ω–æ –±—ã–ª –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º, –≥–¥–µ –æ–Ω –¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 * —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—è–≤–ª—è–µ—Ç—Å—è –º–µ–Ω—é.
 *
 *
 * */


var TelegramBot = require('node-telegram-bot-api'),
    token = 'token',
    bot = new TelegramBot(token, { polling: true });

var _task= null;
var _search= null;
var _sendclose= null;
var _sendclosenumber= null;
var _getUserId= null;
var field = null;
var _solo;

function connectBd(){
    var mysql      = require('mysql');
    var connection = mysql.createConnection({
        host     : 'host',
        user     : 'user',
        password : 'password',
        database : 'bd'
    });
    return connection;
}

function strip(html) {
    return html.replace(/<.*?>/g, '');
}

function testSendMessage(chatId){
    bot.sendMessage(chatId, '–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ!');
}


var sendOrCloseTask = function sendOrCloseTasks(taks_id, status) {
    console.log(taks_id);
    if(status == 1) {
        var options = {
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{text: '–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data: 'sendComment_' + taks_id}, {text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ', callback_data: 'sendClose_'+taks_id}]
                ]
            })
        };
    } else if(status == 2){
        var options = {
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{text: '–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data: 'sendComment_' + taks_id}]
                ]
            })
        };
    }
    return options;
};


bot.on('message', function(msg) {
    var chatId = msg.from.id;
    var last_name = msg.chat.last_name;
    var name = msg.chat.first_name;
    console.log(msg);

    //bot.sendMessage({chat_id: chatId,text: 'Some text...', reply_markup: JSON.stringify({hide_keyboard: true})});

    var connection = connectBd();
    connection.connect();
    connection.query('SQL query', function (error, results, fields) {
        if (error) throw error;
        console.log(results);
        if (results == '') {
            bot.sendMessage(chatId, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞\n –ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–∞—Å –≤–µ—Ä–Ω–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º, –≥–¥–µ –≤—ã –¥–æ–ª–∂–Ω—ã –≤ —á–∞—Ç–µ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –∫–æ–º–ø–∞–Ω–¥—É - "/info" \n –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ —Å–∞–π—Ç - \n URL='+chatId+'', {
                reply_markup: JSON.stringify({
                    keyboard: [
                        [{text: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',callback_data: '1'}]]
                })
            });
            return false;
        }
    });
    connection.end();
    if(msg.text == '/–æ–±–Ω–æ–≤–∏—Ç—å'){
        startTasks(chatId);
    } else if (msg.text == '/info') {
        startTasks(chatId);
    } else if(msg.text == '/start'){
        startTasks(chatId);
    } else if (msg.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚Ñπ') {
        info(chatId);
    } else if (msg.text == '–ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è üë§') {
        getMenuTasks(chatId);
    } else if (msg.text == '–ù–∞–∑–∞–¥ ‚§¥Ô∏è') {
        startTasks(chatId);
    } else if (msg.text == '–íx->–¢–µ–∫—É—â–∏–µ  üìÉ') {
        var connection = connectBd();
        connection.connect();
        connection.query('SQL query', function (error, results, fields) {
            if (error) throw error;
            if (results != '') {
                tasksVxTek(chatId, results[0].load_task);
            } else {
                console.log('–£–≤—ã');
            }
        });
        connection.end();
    } else if (msg.text == '–ü–æ–∏—Å–∫ üîé') {
        var connection = connectBd();
        connection.connect();
        connection.query('SQL query', function (error, results, fields) {
            if (error) throw error;
            if (results != '') {
                selectField(chatId);
            } else {
                console.log('–£–≤—ã');
            }
        });
        connection.end();
        //checkValid(chatId);
    } else if (msg.text == '–íx->–í—ã–ø–æ–ª–Ω.  üìÉ') {
        tasksVxVipol(chatId, last_name, name);
    } else if (msg.text == '–íx->–ó–∞–∫—Ä—ã—Ç—ã–µ  üìÉ') {
        tasksVxClose(chatId, last_name, name);
    } else if (msg.text == '–ò—Å—Ö->–¢–µ–∫—É—â–∏–µ  üìÉ') {
        var connection = connectBd();
        connection.connect();
        connection.query('SQL query', function (error, results, fields) {
            if (error) throw error;
            if (results != '') {
                tasksIsxAction(chatId, results[0].load_task);
            } else {
                console.log('–£–≤—ã');
            }
        });
        connection.end();
    } else if (msg.text == '–ò—Å—Ö->–í—ã–ø–æ–ª–Ω.  üìÉ') {
        tasksIsxVipol(chatId, last_name, name);
    } else if (msg.text == '–ò—Å—Ö->–ó–∞–∫—Ä—ã—Ç—ã–µ  üìÉ') {
        tasksIsxClose(chatId, last_name, name);
    } else if (msg.text == '/alert') {
        viewSecondMessage(chatId, msg.text);
    }  else if(msg.text == '–ù–æ–≤–æ—Å—Ç–∏ üì¢'){
        newsKSYZ(chatId, msg);
    } else if(msg.text == '–í—ã–π—Ç–∏ ‚ñ∫'){
        logOut(chatId);
    } else if(msg.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ üìÉ'){
        field = 'sendclose';
        checkValid(chatId);
    } else if(msg.text == '–ö–æ–Ω–µ—á–Ω–æ'){
        updateStatusSendCLose(chatId, _sendclosenumber);
    } else if(msg.text == '–û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞‚ùóÔ∏è'){
        startTasks(chatId);
    } else if(msg.text == '–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ'){
        newLoadTask(chatId);
    } else if(msg.text == '–ö –∑–∞–¥–∞–Ω–∏—è–º ‚§¥Ô∏è'){
        getMenuTasks(chatId);
    } else if (msg.text == '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ üíæ') {
        field = 'task';
        checkValid(chatId);
    } else if (checkValid != null) {
        var connection = connectBd();
        connection.connect();
        connection.query('SQL query', function (error, results, fields) {
            if (error) throw error;
            if (results != '') {
                checkValid(chatId,results[0].field, msg.text, msg);
                checkValid(chatId, results[0].field);
            } else {
                bot.sendMessage(chatId, '–û—à–∏–±–∫–∞!');
            }
        });
        connection.end();
    }
    else {
        defaultCommand(chatId);
    }
})

bot.on('callback_query', function (msg) {
    var chatId = msg.from.id;
    var text = msg.data;
    var comand = text.split('_');
    console.log(comand[0]);
    if(comand[0] == 'sendComment'){
        var connection = connectBd();
        connection.connect();

        connection.query('SQL query', function (error, results, fields) {
            if (error) throw error;
        });

        connection.query('SQL query', function (error, results, fields) {
            if (error) throw error;
            if (results != '') {
                selectField(chatId, comand[1]);
            } else {
                console.log('–£–≤—ã');
            }
        });
        connection.end();
    } else if(comand[0] == 'sendClose'){
        console.log('–û—Ç–ø–∞—Ä–≤–ª—è–µ–º –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ');
        console.log(comand[1]);
        bot.sendMessage(chatId, '–ü–æ–¥–æ–∂–¥–∏—Ç–µ. –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...');

        const https = require('https');

        var req = https.get('URL', (res) => {
                console.log('statusCode:', res.statusCode);
        console.log('headers:', res.headers);


        res.on('data', (d) => {
            process.stdout.write(d);
        bot.sendMessage(chatId, '–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ!');
        startTasks(chatId);
    });

    }).on('error', (e) => {
            console.error(e);
    });
        req.end();
    }
});

function newLoadTask(chatId){
    const https = require('https');

    var req = https.get('URL', (res) => {
            console.log('statusCode:', res.statusCode);
    console.log('headers:', res.headers);


    res.on('data', (d) => {
        process.stdout.write(d);
    getLoadPage(chatId);
});

}).on('error', (e) => {
        console.error(e);
});
    req.end();
}

function getLoadPage(chatId){
    var connection = connectBd();
    connection.connect();
    connection.query('SQL query', function (error, results, fields) {
        if (error) throw error;
        if (results != '') {
            if(results[0].type_task == 1){
                tasksVxTek(chatId, results[0].load_task)
            } else if(results[0].type_task == 4){
                tasksIsxAction(chatId, results[0].load_task);
            }
        } else {
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞!');
        }
    });
    connection.end();
}

function newsKSYZ(chatId){
    bot.sendMessage(chatId, '–¢—É—Ç –±—É–¥—É—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–π');
}

function selectField(chatId, text, msg){
    var connection = connectBd();
    connection.connect();
    connection.query('SQL query', function (error, results, fields) {
        if (error) throw error;
        if (results != '') {
            console.log('Ya_tyt '+results[0].field);
            checkValid(chatId, results[0].field);
        } else {
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞!');
        }
    });
    connection.end();
}

function viewSecondMessage(chatId, text){
    bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏');
}


function authMes(chatId){
    bot.sendMessage(chatId, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞\n –ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–∞—Å –≤–µ—Ä–Ω–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º, –≥–¥–µ –≤—ã –¥–æ–ª–∂–Ω—ã –≤ —á–∞—Ç–µ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –∫–æ–º–ø–∞–Ω–¥—É - "/info" \n –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ —Å–∞–π—Ç - \n URL='+chatId+'', {
        reply_markup: JSON.stringify({
            keyboard: [
                [{text: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',callback_data: '1'}]]
        })
    });
}

function logOut(chatId){
    const https = require('https');

    var req = https.get('SQL query', (res) => {
            console.log('statusCode:', res.statusCode);
    console.log('headers:', res.headers);


    res.on('data', (d) => {
        process.stdout.write(d);
        authMes(chatId);
    });

    }).on('error', (e) => {
            console.error(e);
    });
        req.end();
}

function startTasks(chatId){
    var connection = connectBd();
    connection.query('SQL query', function (error, results, fields) {
        if (error) throw error;
    });
    connection.end();
    bot.sendMessage(chatId, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –£—á–µ—Ç–∞ –∑–∞–¥–∞–Ω–∏—è.\n /info - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç', {
        reply_markup: JSON.stringify({
            keyboard: [
                [{text: '–ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è üë§',callback_data: '1'},{text: '–ü–æ–∏—Å–∫ üîé',callback_data: '1'}],
                [{text: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚Ñπ',callback_data: '2'}, {text: '–û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞‚ùóÔ∏è',callback_data: '2'}],
                [{text: ' –ù–æ–≤–æ—Å—Ç–∏ üì¢',callback_data: '223'}, {text: '–í—ã–π—Ç–∏ ‚ñ∫',callback_data: '2'}]]
        })
    });
}

function info(chatId){
    bot.sendMessage(chatId, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –ø–æ —Å–∏—Å—Ç–µ–º–µ —É—á–µ—Ç–∞ –∑–∞–¥–Ω–∏–π!\n –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã!\n –í–∞–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n 1) –û –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è\n 2) –û –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –≤ –≤–∞—à–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö\n 3) –û –∑–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–¥–∞–Ω–∏—è\n 4) –û –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ');
}

function getMenuTasks(chatId){
    var connection = connectBd();
    connection.connect();
    connection.query('SQL query', function (error, results, fields) {
        if (error) throw error;
    });
    connection.end();
    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è', {
        reply_markup: JSON.stringify({
            keyboard: [
                [{text: '–íx->–¢–µ–∫—É—â–∏–µ  üìÉ',callback_data: '1'},{text: '–íx->–í—ã–ø–æ–ª–Ω.  üìÉ',callback_data: '1'},{text: '–íx->–ó–∞–∫—Ä—ã—Ç—ã–µ  üìÉ',callback_data: '1'}],
                [{text: '–ò—Å—Ö->–¢–µ–∫—É—â–∏–µ  üìÉ',callback_data: '1'},{text: '–ò—Å—Ö->–í—ã–ø–æ–ª–Ω.  üìÉ',callback_data: '1'},{text: '–ò—Å—Ö->–ó–∞–∫—Ä—ã—Ç—ã–µ  üìÉ',callback_data: '1'}],
                [{text: '–ù–∞–∑–∞–¥ ‚§¥Ô∏è',callback_data: '2'}]]
        })
    });
}

function updateTelegramIdUser(user_id, chatId){
    //console.log(user_id);return false;
    var connection = connectBd();

    connection.connect();

    connection.query('SQL query', function (error, results, fields) {
        if (error) throw error;
        console.log(results);
        if (results != '') {
            bot.sendMessage(chatId, '–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!');
        } else {
            bot.sendMessage(chatId, '–í–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏!');
        }
    });
    connection.end();
}

function checkValid(chatId, field, text, msg) {
    if (field == 'task') {
        if (text) {
            InsertTask(chatId, text, msg);
        } else {
            bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è', {
                reply_markup: JSON.stringify({
                    keyboard: [
                        [{text: '–ù–∞–∑–∞–¥ ‚§¥Ô∏è'}]]
                })
            });
            //bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏');
        }
    }

    if (field == 'search') {
        if (text) {
            searchTasks(chatId, text, msg);
        }
        else {
            bot.sendMessage(chatId, '–ü–æ–∏—Å–∫ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ –º–æ–∏–º –∑–∞–¥–∞–Ω–∏—è–º.\n –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞...', {
                reply_markup: JSON.stringify({
                    keyboard: [
                        [{text: '–ù–∞–∑–∞–¥ ‚§¥Ô∏è'}]]
                })
            });
            //bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏');
        }
    }

    if (field == 'sendclose') {
        if (text) {
            sendclosetask(chatId, text, msg);
        }
        else {
            bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥—á–∏ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ.', {
                reply_markup: JSON.stringify({
                    keyboard: [
                        [{text: '–ù–∞–∑–∞–¥ ‚§¥Ô∏è'}]]
                })
            });
            //bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏');
        }
    }

    if (field == 'comment') {
        if (text) {
            addComment(chatId, text, msg);
        }
        else {
            bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.', {
                reply_markup: JSON.stringify({
                    keyboard: [
                        [{text: '–ù–∞–∑–∞–¥ ‚§¥Ô∏è'}]]
                })
            });
            //bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏');
        }
    }
}

function addComment(chatId, text, msg){
    console.log(text);
    bot.sendMessage(chatId, '–ü–æ–¥–æ–∂–¥–∏—Ç–µ. –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...');
    var connection = connectBd();
    connection.query('SQL query', function (error, results, fields) {
        if (error){
            error
        } else {
            const https = require('https');

            var req = https.get('URL', (res) => {
                    console.log('statusCode:', res.statusCode);
            console.log('headers:', res.headers);


            res.on('data', (d) => {
                process.stdout.write(d);
            startTasks(chatId);
        });

        }).on('error', (e) => {
                console.error(e);
        });
            req.end();
        }
    });
    connection.end();
}

function sendclosetask(chatId, text, msg){
    var num = Number(text);
    console.log(num);
    var connection = connectBd();
    connection.connect();
    connection.query('SQL query', function (error, results, fields) {
        if (error) throw error;
        console.log(results);
        if (results != '') {
            for (var i = 0; i < results.length; i++) {
                bot.sendMessage(chatId, '–≠—Ç—É –∑–∞–¥–∞—á—É –∑–∞–∫—Ä—ã—Ç—å?\n –ó–∞–¥–∞—á–∞ ‚Ññ' + results[i].id + '\n –û–ø–∏—Å–∞–Ω–∏–µ: ' + results[i].full + '\n —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ (URL' + results[i].id + ')', {
                    reply_markup: JSON.stringify({
                        keyboard: [
                            [{text: '–ö–æ–Ω–µ—á–Ω–æ'},{text: '–ù–µ–µ–µ—Ç'}]]
                    })
                });
            }
            _sendclosenumber = num;
            field = null;
            _sendclose = null;
        } else {
            bot.sendMessage(chatId, '–ù–µ—Ç —Ç–∞–∫–æ–π –∑–∞–¥–∞—á–∏');
        }
    });
    connection.end();
}

function updateStatusSendCLose(chatId, _sendclosenumber){
    console.log('get_'+_sendclosenumber);
    var connection = connectBd();
    connection.connect();

    connection.query('SQL query', function (error, results, fields) {
        if (error) throw error;
        console.log(results);
        if(results != ''){
            _getUserId = results[0].user_id;
        } else {
            bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        }
    });
    //console.log(getUserID);
    if(typeof getUserID == 'undefined'){
        startTasks(chatId);return false;
    } else {
        connection.query('SQL query', function (error, results, fields) {
            if (error) throw error;
            console.log(results);
            if (results != '') {
                bot.sendMessage(chatId, '–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!');
                getUserID = null;
            } else {
                bot.sendMessage(chatId, '–í–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏');
            }
        });

        connection.query('SQL query', function (error, results, fields) {
            if (error) throw error;
            console.log(results);
            if (results != '') {
                bot.sendMessage(chatId, '–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!');
            } else {
                bot.sendMessage(chatId, '–í–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏');
            }
        });
    }
    connection.end();
}

function searchTasks(chatId, text, msg){
    console.log('–ò—â–µ–º...');
    if(text != '') {
        var last_name = msg.chat.last_name;
        var name = msg.chat.first_name;
        var connection = connectBd();

        connection.connect();

        connection.query('SQL query', function (error, results, fields) {
            if (error) throw error;
            console.log(results);
            if (results != '') {
                for (var i = 0; i < results.length; i++) {
                    bot.sendMessage(chatId, '–ó–∞–¥–∞—á–∞ ‚Ññ' + results[i].id + '\n –û–ø–∏—Å–∞–Ω–∏–µ: ' + strip(results[i].full) + '\n —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ (URL' + results[i].id + ') –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –∫ –∑–∞–¥–∞–Ω–∏—é: ', sendOrCloseTask(results[i].id, results[i].status));
                }
            } else {
                bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á!');
            }
        });
        connection.end();
    }
}

function InsertTask(chatId, text, msg) {
    //console.log(text);return;
    if(text != '–ù–∞–∑–∞–¥ ‚§¥Ô∏è') {
        var connection = connectBd();
        var first_name = msg.chat.first_name;
        var last_name = msg.chat.last_name;
        var date = msg.date;
        connection.connect();
        connection.query('SQL query', function (error, results, fields) {
            if (error) throw error;
            console.log(results);
            if (results = 1) {
                bot.sendMessage(chatId, '–í—ã —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É.');
                _task = null;
                field = null;
                startTasks(chatId);
                return;
            } else {
                bot.sendMessage(chatId, '–û—à–∏–±–∫–∞!');
                return;
            }
        });
        connection.end();
    } else {
        startTasks(chatId);
    }
}

function tasksVxTek(chatId, load_task){
    var connection = connectBd();
    connection.connect();
    connection.query('SQL query', function (error, results, fields) {
        if (error) throw error;
    });

    connection.query('SQL query', function (error, results, fields) {
        if (error) throw error;
        console.log(results);
        if(results != ''){
            for(var i = 0; i < results.length; i++){
                bot.sendMessage(chatId, '–ó–∞–¥–∞—á–∞ ‚Ññ' + results[i].id + '\n –û–ø–∏—Å–∞–Ω–∏–µ: ' + strip(results[i].full) + '\n —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ (URL) –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –∫ –∑–∞–¥–∞–Ω–∏—é: ', sendOrCloseTask(results[i].id, results[i].status));
            }
            bot.sendMessage(chatId, '–ï—â–µ?', {
                reply_markup: JSON.stringify({
                    keyboard: [
                        [{text: '–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ'},{text: '–ö –∑–∞–¥–∞–Ω–∏—è–º ‚§¥Ô∏è', callback_data: 'all_my_task'}]]
                })
            });
        } else {
            bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á!');
        }
    });
    connection.end();
    //bot.sendMessage(chatId, '–ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, —Ç–æ –µ–µ –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å, –Ω–∞–ø–∏—Å–∞–≤ –≤ —á–∞—Ç–µ (–ø—Ä–∏–º–µ—Ä): 6032 - –≥–æ—Ç–æ–≤–æ, –≥–¥–µ 6032 - —ç—Ç–æ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è');
}

function tasksVxVipol(chatId, last_name, name){
    var connection = connectBd();

    connection.connect();

    connection.query('SQL query', function (error, results, fields) {
        if (error) throw error;
        console.log(results);
        if(results != ''){
            for(var i = 0; i < results.length; i++){
                bot.sendMessage(chatId, '–ó–∞–¥–∞—á–∞ ‚Ññ'+results[i].id+'\n –û–ø–∏—Å–∞–Ω–∏–µ: '+results[i].full+'\n —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ (URL/'+results[i].id+')');
            }
        } else {
            bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á!');
        }
    });
    connection.end();
    //bot.sendMessage(chatId, '–ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, —Ç–æ –µ–µ –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å, –Ω–∞–ø–∏—Å–∞–≤ –≤ —á–∞—Ç–µ (–ø—Ä–∏–º–µ—Ä): 6032 - –≥–æ—Ç–æ–≤–æ, –≥–¥–µ 6032 - —ç—Ç–æ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è');
}

function tasksVxClose(chatId, last_name, name){
    var connection = connectBd();

    connection.connect();

    connection.query('SQL query', function (error, results, fields) {
        if (error) throw error;
        console.log(results);
        if(results != ''){
            for(var i = 0; i < results.length; i++){
                bot.sendMessage(chatId, '–ó–∞–¥–∞—á–∞ ‚Ññ'+results[i].id+'\n –û–ø–∏—Å–∞–Ω–∏–µ: '+results[i].full+'\n —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ (URL'+results[i].id+')');
            }
        } else {
            bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á!');
        }
    });
    connection.end();
    //bot.sendMessage(chatId, '–ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, —Ç–æ –µ–µ –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å, –Ω–∞–ø–∏—Å–∞–≤ –≤ —á–∞—Ç–µ (–ø—Ä–∏–º–µ—Ä): 6032 - –≥–æ—Ç–æ–≤–æ, –≥–¥–µ 6032 - —ç—Ç–æ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è');
}

function tasksIsxAction(chatId, load_task) {
    var connection = connectBd();
    connection.connect();

    connection.query('SQL query', function (error, results, fields) {
        if (error) throw error;
    });

    connection.query('SQL query', function (error, results, fields) {
        if (error) throw error;
        console.log(results);
        if(results != ''){
            for(var i = 0; i < results.length; i++){
                bot.sendMessage(chatId, '–ó–∞–¥–∞—á–∞ ‚Ññ'+results[i].id+'\n –û–ø–∏—Å–∞–Ω–∏–µ: '+strip(results[i].full)+'\n —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ (URL'+results[i].id+')');
            }
            bot.sendMessage(chatId, '–ï—â–µ?', {
                reply_markup: JSON.stringify({
                    keyboard: [
                        [{text: '–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ'},{text: '–ö –∑–∞–¥–∞–Ω–∏—è–º ‚§¥Ô∏è', callback_data: 'all_my_task'}]]
                })
            });
        } else {
            bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á!');
        }
    });
    connection.end();
    //bot.sendMessage(chatId, '–ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, —Ç–æ –µ–µ –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å, –Ω–∞–ø–∏—Å–∞–≤ –≤ —á–∞—Ç–µ (–ø—Ä–∏–º–µ—Ä): 6032 - –≥–æ—Ç–æ–≤–æ, –≥–¥–µ 6032 - —ç—Ç–æ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è');
}

function tasksIsxVipol(chatId){
    var connection = connectBd();

    connection.connect();

    connection.query('SQL query', function (error, results, fields) {
        if (error) throw error;
        console.log(results);
        if(results != ''){
            for(var i = 0; i < results.length; i++){
                bot.sendMessage(chatId, '–ó–∞–¥–∞—á–∞ ‚Ññ'+results[i].id+'\n –û–ø–∏—Å–∞–Ω–∏–µ: '+results[i].full+'\n —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ (URL'+results[i].id+')');
            }
        } else {
            bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á!');
        }
    });
    connection.end();
}

function tasksIsxClose(chatId){
    bot.sendMessage(chatId, '–¢—É—Ç –±—É–¥—É—Ç –ò—Å—Ö–æ–¥—è—â–∏–µ-–ó–∞–∫—Ä—ã—Ç—ã–µ');
}

function defaultCommand(chatId) {
    bot.sendMessage(chatId, '–≠—Ç–æ —Ç–∞–∫ —Å–µ–±–µ)');
}